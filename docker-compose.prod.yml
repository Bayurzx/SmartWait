# SmartWait MVP Production Docker Compose Configuration
version: '3.8'

services:
  # ================================
  # REVERSE PROXY & LOAD BALANCER
  # ================================
  nginx:
    image: nginx:alpine
    container_name: smartwait-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./infrastructure/ssl:/etc/ssl/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
      - web
    networks:
      - smartwait-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # API SERVICE
  # ================================
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.prod
    container_name: smartwait-api
    environment:
      - NODE_ENV=production
    env_file:
      - .env.production
    volumes:
      - ./logs/api:/var/log/smartwait
      - ./backups:/var/backups/smartwait
    depends_on:
      - postgres
      - redis
    networks:
      - smartwait-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # WEB PORTAL SERVICE
  # ================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.prod
    container_name: smartwait-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api
    volumes:
      - ./logs/web:/var/log/smartwait
    networks:
      - smartwait-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # ================================
  # DATABASE SERVICE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: smartwait-postgres
    environment:
      POSTGRES_DB: smartwait_production
      POSTGRES_USER: smartwait_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/var/backups/postgres
      - ./apps/api/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - smartwait-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartwait_user -d smartwait_production"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # ================================
  # REDIS SERVICE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: smartwait-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    environment:
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
      - ./backups/redis:/var/backups/redis
    networks:
      - smartwait-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ================================
  # MONITORING & LOGGING
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: smartwait-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - smartwait-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: smartwait-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - smartwait-network
    restart: unless-stopped

  # ================================
  # BACKUP SERVICE
  # ================================
  backup:
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: smartwait-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=smartwait_production
      - POSTGRES_USER=smartwait_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - REDIS_HOST=redis
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    secrets:
      - postgres_password
      - redis_password
    volumes:
      - ./backups:/var/backups/smartwait
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - postgres
      - redis
    networks:
      - smartwait-network
    restart: unless-stopped

# ================================
# NETWORKS
# ================================
networks:
  smartwait-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ================================
# SECRETS
# ================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  twilio_auth_token:
    file: ./secrets/twilio_auth_token.txt