# Multi-stage Dockerfile for API development
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/config/package*.json ./packages/config/

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Development stage
FROM base AS development
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/config/package*.json ./packages/config/

# Install all dependencies (including dev dependencies)
RUN npm ci

# Copy source code
COPY . .
COPY packages/ ./packages/

# Build shared packages
RUN cd packages/shared && npm run build
RUN cd packages/config && npm run build

# Expose port and debugger port
EXPOSE 3001 9229

# Start development server with debugger
CMD ["npm", "run", "dev:debug"]

# Production build stage
FROM base AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .
COPY packages/ ./packages/

# Build shared packages first
RUN cd packages/shared && npm run build
RUN cd packages/config && npm run build

# Build the application
RUN npm run build

# Production stage
FROM base AS production
WORKDIR /app

ENV NODE_ENV=production

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nodejs

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

USER nodejs

EXPOSE 3001

CMD ["node", "dist/index.js"]