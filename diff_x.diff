diff --git a/.gitignore b/.gitignore
index d36edd1..b60e8da 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,135 +1,129 @@
-###############################################################################
-# Mine
-###############################################################################
-*_x.*
-
-
-
-
-###############################################################################
-# Terraform
-###############################################################################
-# Local .terraform directories
-**/.terraform/*
-
-# .tfstate files & lock files
-*.tfstate
-*.tfstate.*
-.terraform.lock.hcl
-
-# Crash logs
-crash.log
-crash.*.log
-
-# Exclude override files
-override.tf
-override.tf.json
-*_override.tf
-*_override.tf.json
-
-# CLI configuration & plan files
-.terraformrc
-terraform.rc
-*.tfplan
-*.tfplan.*
-
-###############################################################################
-# Kubernetes / Helm
-###############################################################################
-# Rendered or downloaded charts
-charts/*/charts/
-charts/*/tmpcharts/
-
-# Helm secrets / values files that may contain secrets
-*secret*.yaml
-*secret*.yml
-*values*.yaml
-*values*.yml
-!example-*values*.yaml
-!example-*values*.yml
-
-# Kustomize build output
-kustomize/**/build/
-
-# Local kubeconfigs (unless explicitly tracked)
-kubeconfig*
-.kube/
-
-###############################################################################
-# Docker
-###############################################################################
-# Build contexts that get auto-generated
-.dockerignore
-docker-compose.override.yml
-
-# Ignore built images / layers (if you ever commit them)
-*.tar
-*.img
-*.docker
-
-###############################################################################
-# Node.js (React / Next.js / TypeScript)
-###############################################################################
 # Dependencies
 node_modules/
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
-pnpm-debug.log*
-.pnpm-store/
 
-# Build outputs
-.next/
-out/
-dist/
-build/
-*.tsbuildinfo
-
-# Environment files
+# Environment variables
 .env
 .env.local
 .env.development.local
 .env.test.local
 .env.production.local
 
-# Vercel
-.vercel/
+# Build outputs
+dist/
+build/
+.next/
+out/
 
-# Storybook
-storybook-static/
+# Runtime data
+pids
+*.pid
+*.seed
+*.pid.lock
 
-# Jest / Coverage
+# Coverage directory used by tools like istanbul
 coverage/
-.nyc_output/
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Dependency directories
+jspm_packages/
 
-# ESLint & Prettier caches
+# Optional npm cache directory
+.npm
+
+# Optional eslint cache
 .eslintcache
-.prettiercache
 
-###############################################################################
-# OS / Editor
-###############################################################################
-.DS_Store
-Thumbs.db
+# Microbundle cache
+.rpt2_cache/
+.rts2_cache_cjs/
+.rts2_cache_es/
+.rts2_cache_umd/
+
+# Optional REPL history
+.node_repl_history
+
+# Output of 'npm pack'
+*.tgz
+
+# Yarn Integrity file
+.yarn-integrity
+
+# parcel-bundler cache (https://parceljs.org/)
+.cache
+.parcel-cache
 
-# IDEs
+# Next.js build output
+.next
+
+# Nuxt.js build / generate output
+.nuxt
+
+# Gatsby files
+.cache/
+public
+
+# Storybook build outputs
+.out
+.storybook-out
+
+# Temporary folders
+tmp/
+temp/
+
+# Editor directories and files
 .vscode/
 .idea/
 *.swp
 *.swo
 *~
 
-###############################################################################
-# Logs & Misc
-###############################################################################
+# OS generated files
+.DS_Store
+.DS_Store?
+._*
+.Spotlight-V100
+.Trashes
+ehthumbs.db
+Thumbs.db
+
+# Logs
+logs
 *.log
-logs/
-*.pid
-*.seed
-*.pid.lock
 
-# Temporary folders
-tmp/
-temp/
-.tmp/
-.temp/
\ No newline at end of file
+# Database
+*.sqlite
+*.db
+
+# Docker
+.dockerignore
+
+# Expo
+.expo/
+web-build/
+
+# React Native
+*.jks
+*.p8
+*.p12
+*.key
+*.mobileprovision
+*.orig.*
+
+# TypeScript
+*.tsbuildinfo
+
+# Testing
+coverage/
+.nyc_output/
+
+# Lerna
+lerna-debug.log*
+
+# Local development
+.local/
\ No newline at end of file
diff --git a/.kiro/specs/smartwait-mvp/tasks.md b/.kiro/specs/smartwait-mvp/tasks.md
index 12696c6..1959bd2 100644
--- a/.kiro/specs/smartwait-mvp/tasks.md
+++ b/.kiro/specs/smartwait-mvp/tasks.md
@@ -18,7 +18,12 @@ This implementation plan breaks down the SmartWait MVP into 10 days of focused d
 **Description:** Set up the complete project structure with database schema and basic API foundation.
 
 **Acceptance Criteria:**
-- [ ] Create monorepo structure with api/, web/, and mobile/ directories
+- [x] Create monorepo structure with api/, web/, and mobile/ directories
+
+
+
+
+
 - [ ] Set up PostgreSQL database with complete schema (patients, queue_positions, staff_sessions, sms_notifications)
 - [ ] Create Docker Compose configuration for local development
 - [ ] Set up TypeScript configuration for all projects
diff --git a/README.md b/README.md
index e69de29..de8650a 100644
--- a/README.md
+++ b/README.md
@@ -0,0 +1,229 @@
+# SmartWait - Healthcare Queue Management System
+
+A comprehensive virtual queuing ecosystem that transforms healthcare waiting experiences through intelligent queue management, real-time communication, and data-driven optimization.
+
+## üèóÔ∏è Project Structure
+
+This is a monorepo containing all SmartWait applications and services:
+
+```
+smartwait/
+‚îú‚îÄ‚îÄ apps/
+‚îÇ   ‚îú‚îÄ‚îÄ api/          # Node.js/Express API server
+‚îÇ   ‚îú‚îÄ‚îÄ web/          # Next.js web portal and staff dashboard
+‚îÇ   ‚îî‚îÄ‚îÄ mobile/       # React Native mobile app (Expo)
+‚îú‚îÄ‚îÄ packages/
+‚îÇ   ‚îî‚îÄ‚îÄ shared/       # Shared types and utilities
+‚îú‚îÄ‚îÄ infrastructure/
+‚îÇ   ‚îî‚îÄ‚îÄ docker/       # Docker configurations
+‚îî‚îÄ‚îÄ docs/            # Documentation
+```
+
+## üöÄ Quick Start
+
+### Prerequisites
+
+- Node.js 18+ 
+- npm 8+
+- Docker and Docker Compose
+- Expo CLI (for mobile development)
+
+### Installation
+
+1. **Clone the repository**
+   ```bash
+   git clone <repository-url>
+   cd smartwait
+   ```
+
+2. **Install dependencies**
+   ```bash
+   npm run install:all
+   ```
+
+3. **Set up environment variables**
+   ```bash
+   # Copy environment files
+   cp apps/api/.env.example apps/api/.env
+   cp apps/web/.env.example apps/web/.env
+   
+   # Edit the .env files with your configuration
+   ```
+
+4. **Start the development environment**
+   ```bash
+   # Start all services with Docker
+   docker-compose up -d
+   
+   # Or start individual services
+   npm run dev
+   ```
+
+### Development URLs
+
+- **API Server**: http://localhost:3001
+- **Web Portal**: http://localhost:3000
+- **Mobile App**: Use Expo Go app to scan QR code
+
+## üì± Applications
+
+### API Server (`apps/api`)
+- **Technology**: Node.js, Express, TypeScript
+- **Database**: PostgreSQL with Redis caching
+- **Features**: Queue management, SMS notifications, real-time updates
+
+### Web Portal (`apps/web`)
+- **Technology**: Next.js 13, React, TypeScript, Tailwind CSS
+- **Features**: Patient check-in portal, staff dashboard
+
+### Mobile App (`apps/mobile`)
+- **Technology**: React Native, Expo, TypeScript
+- **Features**: Patient check-in, queue status tracking, push notifications
+
+## üõ†Ô∏è Development
+
+### Available Scripts
+
+```bash
+# Development
+npm run dev              # Start all services
+npm run dev:api          # Start API server only
+npm run dev:web          # Start web portal only
+npm run dev:mobile       # Start mobile app only
+
+# Building
+npm run build            # Build all applications
+npm run build:api        # Build API server
+npm run build:web        # Build web portal
+
+# Testing
+npm run test             # Run all tests
+npm run test:api         # Test API server
+npm run test:web         # Test web portal
+npm run test:mobile      # Test mobile app
+
+# Linting
+npm run lint             # Lint all projects
+```
+
+### Database Setup
+
+The PostgreSQL database is automatically initialized with Docker Compose. The schema includes:
+
+- **patients**: Patient information
+- **queue_positions**: Queue management
+- **staff_sessions**: Staff authentication
+- **sms_notifications**: SMS delivery tracking
+
+### Environment Configuration
+
+#### API Server (`.env`)
+```env
+PORT=3001
+DATABASE_URL=postgresql://user:password@localhost:5432/smartwait
+REDIS_URL=redis://localhost:6379
+JWT_SECRET=your-jwt-secret
+TWILIO_ACCOUNT_SID=your-twilio-sid
+TWILIO_AUTH_TOKEN=your-twilio-token
+TWILIO_PHONE_NUMBER=+1234567890
+```
+
+#### Web Portal (`.env`)
+```env
+NEXT_PUBLIC_API_URL=http://localhost:3001
+NEXT_PUBLIC_WS_URL=ws://localhost:3001
+```
+
+## üè• Features
+
+### Core Functionality
+- ‚úÖ **Multi-channel Check-in**: Mobile app, web portal, QR codes
+- ‚úÖ **Real-time Queue Management**: Live position updates
+- ‚úÖ **SMS Notifications**: Automated patient notifications
+- ‚úÖ **Staff Dashboard**: Queue management interface
+- ‚úÖ **Remote Waiting**: Location-based waiting capabilities
+
+### Technical Features
+- üîí **HIPAA Compliant**: Secure patient data handling
+- üì± **Cross-platform**: iOS, Android, and web support
+- ‚ö° **Real-time Updates**: WebSocket-based live updates
+- üîÑ **API Integration**: Healthcare system compatibility
+- üìä **Analytics**: Queue performance insights
+
+## üß™ Testing
+
+### Unit Tests
+```bash
+npm run test:api         # API unit tests
+npm run test:web         # Web component tests
+npm run test:mobile      # Mobile component tests
+```
+
+### Integration Tests
+```bash
+# API integration tests
+cd apps/api && npm run test:integration
+
+# End-to-end tests
+cd apps/web && npm run test:e2e
+```
+
+## üì¶ Deployment
+
+### Docker Production Build
+```bash
+# Build production images
+docker-compose -f docker-compose.prod.yml build
+
+# Deploy to production
+docker-compose -f docker-compose.prod.yml up -d
+```
+
+### Individual Service Deployment
+```bash
+# API Server
+cd apps/api
+npm run build
+npm start
+
+# Web Portal
+cd apps/web
+npm run build
+npm start
+```
+
+## ü§ù Contributing
+
+1. Fork the repository
+2. Create a feature branch (`git checkout -b feature/amazing-feature`)
+3. Commit your changes (`git commit -m 'Add amazing feature'`)
+4. Push to the branch (`git push origin feature/amazing-feature`)
+5. Open a Pull Request
+
+### Development Guidelines
+
+- Follow TypeScript strict mode
+- Use conventional commit messages
+- Write tests for new features
+- Update documentation as needed
+- Follow the established code style
+
+## üìÑ License
+
+This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
+
+## üÜò Support
+
+For support and questions:
+- Create an issue in this repository
+- Check the [documentation](./docs/)
+- Review the [API documentation](http://localhost:3001/docs) when running locally
+
+## üó∫Ô∏è Roadmap
+
+- [ ] Advanced analytics dashboard
+- [ ] Multi-language support
+- [ ] Voice notifications
+- [ ] Digital signage integration
+- [ ] Advanced EHR integrations
+- [ ] Machine learning wait time predictions
\ No newline at end of file
diff --git a/docker-compose.yml b/docker-compose.yml
index e69de29..a61faad 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -0,0 +1,84 @@
+version: '3.8'
+
+services:
+  # PostgreSQL Database
+  postgres:
+    image: postgres:14-alpine
+    container_name: smartwait-postgres
+    environment:
+      POSTGRES_DB: smartwait
+      POSTGRES_USER: smartwait_user
+      POSTGRES_PASSWORD: smartwait_password
+    ports:
+      - "5432:5432"
+    volumes:
+      - postgres_data:/var/lib/postgresql/data
+      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
+    networks:
+      - smartwait-network
+
+  # Redis Cache
+  redis:
+    image: redis:6-alpine
+    container_name: smartwait-redis
+    ports:
+      - "6379:6379"
+    volumes:
+      - redis_data:/data
+    networks:
+      - smartwait-network
+
+  # API Service
+  api:
+    build:
+      context: ./apps/api
+      dockerfile: Dockerfile
+    container_name: smartwait-api
+    ports:
+      - "3001:3001"
+    environment:
+      - NODE_ENV=development
+      - PORT=3001
+      - DATABASE_URL=postgresql://smartwait_user:smartwait_password@postgres:5432/smartwait
+      - REDIS_URL=redis://redis:6379
+      - JWT_SECRET=development-jwt-secret-change-in-production
+      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
+      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
+      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
+    depends_on:
+      - postgres
+      - redis
+    volumes:
+      - ./apps/api:/app
+      - /app/node_modules
+    networks:
+      - smartwait-network
+
+  # Web Application
+  web:
+    build:
+      context: ./apps/web
+      dockerfile: Dockerfile
+    container_name: smartwait-web
+    ports:
+      - "3000:3000"
+    environment:
+      - NODE_ENV=development
+      - NEXT_PUBLIC_API_URL=http://localhost:3001
+      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
+    depends_on:
+      - api
+    volumes:
+      - ./apps/web:/app
+      - /app/node_modules
+      - /app/.next
+    networks:
+      - smartwait-network
+
+volumes:
+  postgres_data:
+  redis_data:
+
+networks:
+  smartwait-network:
+    driver: bridge
\ No newline at end of file
diff --git a/package.json b/package.json
index e69de29..35f49bc 100644
--- a/package.json
+++ b/package.json
@@ -0,0 +1,56 @@
+{
+  "name": "smartwait-monorepo",
+  "version": "1.0.0",
+  "description": "SmartWait Healthcare Queue Management System",
+  "private": true,
+  "workspaces": [
+    "apps/*",
+    "packages/*"
+  ],
+  "scripts": {
+    "dev": "concurrently \"npm run dev:api\" \"npm run dev:web\" \"npm run dev:mobile\"",
+    "dev:api": "cd apps/api && npm run dev",
+    "dev:web": "cd apps/web && npm run dev",
+    "dev:mobile": "cd apps/mobile && npm start",
+    "build": "npm run build:api && npm run build:web",
+    "build:api": "cd apps/api && npm run build",
+    "build:web": "cd apps/web && npm run build",
+    "test": "npm run test:api && npm run test:web && npm run test:mobile",
+    "test:api": "cd apps/api && npm test",
+    "test:web": "cd apps/web && npm test",
+    "test:mobile": "cd apps/mobile && npm test",
+    "lint": "npm run lint:api && npm run lint:web && npm run lint:mobile",
+    "lint:api": "cd apps/api && npm run lint",
+    "lint:web": "cd apps/web && npm run lint",
+    "lint:mobile": "cd apps/mobile && npm run lint",
+    "install:all": "npm install && npm run install:api && npm run install:web && npm run install:mobile",
+    "install:api": "cd apps/api && npm install",
+    "install:web": "cd apps/web && npm install",
+    "install:mobile": "cd apps/mobile && npm install",
+    "clean": "npm run clean:api && npm run clean:web && npm run clean:mobile",
+    "clean:api": "cd apps/api && rm -rf node_modules dist",
+    "clean:web": "cd apps/web && rm -rf node_modules .next",
+    "clean:mobile": "cd apps/mobile && rm -rf node_modules"
+  },
+  "devDependencies": {
+    "concurrently": "^8.2.0",
+    "lerna": "^7.1.4"
+  },
+  "engines": {
+    "node": ">=18.0.0",
+    "npm": ">=8.0.0"
+  },
+  "repository": {
+    "type": "git",
+    "url": "https://github.com/your-org/smartwait.git"
+  },
+  "keywords": [
+    "healthcare",
+    "queue-management",
+    "virtual-waiting",
+    "patient-experience",
+    "monorepo"
+  ],
+  "author": "SmartWait Team",
+  "license": "MIT"
+}
\ No newline at end of file
