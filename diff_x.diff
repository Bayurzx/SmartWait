diff --git a/.gitignore b/.gitignore
index b60e8da..acf85fc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,6 @@
+# mine
+*_x.*
+
 # Dependencies
 node_modules/
 npm-debug.log*
diff --git a/.kiro/specs/smartwait-mvp/tasks.md b/.kiro/specs/smartwait-mvp/tasks.md
index 1959bd2..6c27865 100644
--- a/.kiro/specs/smartwait-mvp/tasks.md
+++ b/.kiro/specs/smartwait-mvp/tasks.md
@@ -24,7 +24,13 @@ This implementation plan breaks down the SmartWait MVP into 10 days of focused d
 
 
 
-- [ ] Set up PostgreSQL database with complete schema (patients, queue_positions, staff_sessions, sms_notifications)
+- [-] Set up PostgreSQL database with complete schema (patients, queue_positions, staff_sessions, sms_notifications)
+
+
+
+
+
+
 - [ ] Create Docker Compose configuration for local development
 - [ ] Set up TypeScript configuration for all projects
 - [ ] Create basic Express.js API server with health check endpoint
diff --git a/apps/api/package.json b/apps/api/package.json
index 2e0d98e..5f63281 100644
--- a/apps/api/package.json
+++ b/apps/api/package.json
@@ -10,7 +10,12 @@
     "test": "jest",
     "test:watch": "jest --watch",
     "migrate": "npx prisma migrate deploy",
-    "db:seed": "npx prisma db seed"
+    "db:seed": "npx prisma db seed",
+    "db:setup": "ts-node scripts/setup-db.ts",
+    "db:setup:test": "NODE_ENV=test ts-node scripts/setup-db.ts --environment=test --skip-seed",
+    "db:reset": "npx prisma migrate reset --force",
+    "db:studio": "npx prisma studio",
+    "test:db": "npm run db:setup:test && npm test"
   },
   "dependencies": {
     "express": "^4.18.2",
@@ -24,7 +29,8 @@
     "bcrypt": "^5.1.0",
     "jsonwebtoken": "^9.0.2",
     "uuid": "^9.0.0",
-    "joi": "^17.9.2"
+    "joi": "^17.9.2",
+    "@prisma/client": "^5.3.1"
   },
   "devDependencies": {
     "@types/express": "^4.17.17",
@@ -39,9 +45,13 @@
     "ts-node": "^10.9.1",
     "jest": "^29.6.2",
     "@types/jest": "^29.5.3",
-    "ts-jest": "^29.1.1"
+    "ts-jest": "^29.1.1",
+    "prisma": "^5.3.1"
   },
   "engines": {
     "node": ">=18.0.0"
+  },
+  "prisma": {
+    "seed": "ts-node prisma/seed.ts"
   }
 }
\ No newline at end of file
diff --git a/apps/api/src/index.ts b/apps/api/src/index.ts
index 5afdf7b..577be0d 100644
--- a/apps/api/src/index.ts
+++ b/apps/api/src/index.ts
@@ -6,6 +6,10 @@ import dotenv from 'dotenv';
 // Load environment variables
 dotenv.config();
 
+// Import database and routes
+import { testDatabaseConnection, cleanupExpiredSessions } from './utils/database';
+import healthRoutes from './routes/health';
+
 const app = express();
 const PORT = process.env.PORT || 3001;
 
@@ -20,24 +24,58 @@ app.use(cors({
 app.use(express.json({ limit: '10mb' }));
 app.use(express.urlencoded({ extended: true }));
 
-// Health check endpoint
-app.get('/health', (req, res) => {
-  res.status(200).json({
-    status: 'healthy',
-    timestamp: new Date().toISOString(),
-    service: 'smartwait-api'
-  });
-});
+// Routes
+app.use('/health', healthRoutes);
 
 // Basic route
-app.get('/', (req, res) => {
+app.get('/', (_req, res) => {
   res.json({
     message: 'SmartWait API Server',
     version: '1.0.0',
-    status: 'running'
+    status: 'running',
+    database: 'PostgreSQL with Prisma ORM',
+    features: [
+      'Patient check-in',
+      'Queue management',
+      'SMS notifications',
+      'Staff dashboard',
+      'Real-time updates'
+    ]
   });
 });
 
+// Initialize database and start server
+async function startServer() {
+  try {
+    // Test database connection
+    console.log('🔌 Testing database connection...');
+    const isConnected = await testDatabaseConnection();
+    
+    if (!isConnected) {
+      console.error('❌ Failed to connect to database. Please check your DATABASE_URL.');
+      process.exit(1);
+    }
+
+    // Clean up expired sessions on startup
+    await cleanupExpiredSessions();
+
+    // Start the server
+    app.listen(PORT, () => {
+      console.log(`🚀 SmartWait API server running on port ${PORT}`);
+      console.log(`📊 Health check available at http://localhost:${PORT}/health`);
+      console.log(`📊 Detailed health check at http://localhost:${PORT}/health/detailed`);
+      console.log(`🗄️  Database: Connected and ready`);
+    });
+
+  } catch (error) {
+    console.error('❌ Failed to start server:', error);
+    process.exit(1);
+  }
+}
+
+// Start the server
+startServer();
+
 // Start server
 app.listen(PORT, () => {
   console.log(`🚀 SmartWait API server running on port ${PORT}`);
diff --git a/apps/mobile/package.json b/apps/mobile/package.json
index b1e4220..72207b8 100644
--- a/apps/mobile/package.json
+++ b/apps/mobile/package.json
@@ -47,6 +47,8 @@
     "jest": "^29.2.1",
     "jest-expo": "~49.0.0",
     "@testing-library/react-native": "^12.1.3",
+    "react-test-renderer": "18.2.0",
+    "@types/react-test-renderer": "^18.0.0",
     "eslint": "^8.44.0",
     "@typescript-eslint/eslint-plugin": "^6.1.0",
     "@typescript-eslint/parser": "^6.1.0",
diff --git a/apps/mobile/tsconfig.json b/apps/mobile/tsconfig.json
index f9734ed..ff4401a 100644
--- a/apps/mobile/tsconfig.json
+++ b/apps/mobile/tsconfig.json
@@ -1,16 +1,44 @@
 {
-  "extends": "expo/tsconfig.base",
   "compilerOptions": {
     "strict": true,
+    "jsx": "react-native",
+    "target": "esnext",
+    "lib": [
+      "dom",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "esModuleInterop": true,
+    "allowSyntheticDefaultImports": true,
+    "forceConsistentCasingInFileNames": true,
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
     "baseUrl": ".",
     "paths": {
-      "@/*": ["./src/*"],
-      "@/components/*": ["./src/components/*"],
-      "@/screens/*": ["./src/screens/*"],
-      "@/services/*": ["./src/services/*"],
-      "@/types/*": ["./src/types/*"],
-      "@/hooks/*": ["./src/hooks/*"],
-      "@/utils/*": ["./src/utils/*"]
+      "@/*": [
+        "./src/*"
+      ],
+      "@/components/*": [
+        "./src/components/*"
+      ],
+      "@/screens/*": [
+        "./src/screens/*"
+      ],
+      "@/services/*": [
+        "./src/services/*"
+      ],
+      "@/types/*": [
+        "./src/types/*"
+      ],
+      "@/hooks/*": [
+        "./src/hooks/*"
+      ],
+      "@/utils/*": [
+        "./src/utils/*"
+      ]
     }
   },
   "include": [
@@ -18,5 +46,8 @@
     "**/*.tsx",
     ".expo/types/**/*.ts",
     "expo-env.d.ts"
+  ],
+  "exclude": [
+    "node_modules"
   ]
 }
\ No newline at end of file
diff --git a/apps/web/package.json b/apps/web/package.json
index ca105b4..76b3860 100644
--- a/apps/web/package.json
+++ b/apps/web/package.json
@@ -37,7 +37,10 @@
     "jest": "^29.6.2",
     "@testing-library/react": "^13.4.0",
     "@testing-library/jest-dom": "^5.17.0",
-    "jest-environment-jsdom": "^29.6.2"
+    "jest-environment-jsdom": "^29.6.2",
+    "@testing-library/user-event": "^14.4.3",
+    "@types/jest": "^29.5.3",
+    "ts-jest": "^29.1.1"
   },
   "engines": {
     "node": ">=18.0.0"
diff --git a/diff_x.diff b/diff_x.diff
index 15b7e8f..e69de29 100644
--- a/diff_x.diff
+++ b/diff_x.diff
@@ -1,649 +0,0 @@
-diff --git a/.gitignore b/.gitignore
-index d36edd1..b60e8da 100644
---- a/.gitignore
-+++ b/.gitignore
-@@ -1,135 +1,129 @@
--###############################################################################
--# Mine
--###############################################################################
--*_x.*
--
--
--
--
--###############################################################################
--# Terraform
--###############################################################################
--# Local .terraform directories
--**/.terraform/*
--
--# .tfstate files & lock files
--*.tfstate
--*.tfstate.*
--.terraform.lock.hcl
--
--# Crash logs
--crash.log
--crash.*.log
--
--# Exclude override files
--override.tf
--override.tf.json
--*_override.tf
--*_override.tf.json
--
--# CLI configuration & plan files
--.terraformrc
--terraform.rc
--*.tfplan
--*.tfplan.*
--
--###############################################################################
--# Kubernetes / Helm
--###############################################################################
--# Rendered or downloaded charts
--charts/*/charts/
--charts/*/tmpcharts/
--
--# Helm secrets / values files that may contain secrets
--*secret*.yaml
--*secret*.yml
--*values*.yaml
--*values*.yml
--!example-*values*.yaml
--!example-*values*.yml
--
--# Kustomize build output
--kustomize/**/build/
--
--# Local kubeconfigs (unless explicitly tracked)
--kubeconfig*
--.kube/
--
--###############################################################################
--# Docker
--###############################################################################
--# Build contexts that get auto-generated
--.dockerignore
--docker-compose.override.yml
--
--# Ignore built images / layers (if you ever commit them)
--*.tar
--*.img
--*.docker
--
--###############################################################################
--# Node.js (React / Next.js / TypeScript)
--###############################################################################
- # Dependencies
- node_modules/
- npm-debug.log*
- yarn-debug.log*
- yarn-error.log*
--pnpm-debug.log*
--.pnpm-store/
- 
--# Build outputs
--.next/
--out/
--dist/
--build/
--*.tsbuildinfo
--
--# Environment files
-+# Environment variables
- .env
- .env.local
- .env.development.local
- .env.test.local
- .env.production.local
- 
--# Vercel
--.vercel/
-+# Build outputs
-+dist/
-+build/
-+.next/
-+out/
- 
--# Storybook
--storybook-static/
-+# Runtime data
-+pids
-+*.pid
-+*.seed
-+*.pid.lock
- 
--# Jest / Coverage
-+# Coverage directory used by tools like istanbul
- coverage/
--.nyc_output/
-+*.lcov
-+
-+# nyc test coverage
-+.nyc_output
-+
-+# Dependency directories
-+jspm_packages/
- 
--# ESLint & Prettier caches
-+# Optional npm cache directory
-+.npm
-+
-+# Optional eslint cache
- .eslintcache
--.prettiercache
- 
--###############################################################################
--# OS / Editor
--###############################################################################
--.DS_Store
--Thumbs.db
-+# Microbundle cache
-+.rpt2_cache/
-+.rts2_cache_cjs/
-+.rts2_cache_es/
-+.rts2_cache_umd/
-+
-+# Optional REPL history
-+.node_repl_history
-+
-+# Output of 'npm pack'
-+*.tgz
-+
-+# Yarn Integrity file
-+.yarn-integrity
-+
-+# parcel-bundler cache (https://parceljs.org/)
-+.cache
-+.parcel-cache
- 
--# IDEs
-+# Next.js build output
-+.next
-+
-+# Nuxt.js build / generate output
-+.nuxt
-+
-+# Gatsby files
-+.cache/
-+public
-+
-+# Storybook build outputs
-+.out
-+.storybook-out
-+
-+# Temporary folders
-+tmp/
-+temp/
-+
-+# Editor directories and files
- .vscode/
- .idea/
- *.swp
- *.swo
- *~
- 
--###############################################################################
--# Logs & Misc
--###############################################################################
-+# OS generated files
-+.DS_Store
-+.DS_Store?
-+._*
-+.Spotlight-V100
-+.Trashes
-+ehthumbs.db
-+Thumbs.db
-+
-+# Logs
-+logs
- *.log
--logs/
--*.pid
--*.seed
--*.pid.lock
- 
--# Temporary folders
--tmp/
--temp/
--.tmp/
--.temp/
-\ No newline at end of file
-+# Database
-+*.sqlite
-+*.db
-+
-+# Docker
-+.dockerignore
-+
-+# Expo
-+.expo/
-+web-build/
-+
-+# React Native
-+*.jks
-+*.p8
-+*.p12
-+*.key
-+*.mobileprovision
-+*.orig.*
-+
-+# TypeScript
-+*.tsbuildinfo
-+
-+# Testing
-+coverage/
-+.nyc_output/
-+
-+# Lerna
-+lerna-debug.log*
-+
-+# Local development
-+.local/
-\ No newline at end of file
-diff --git a/.kiro/specs/smartwait-mvp/tasks.md b/.kiro/specs/smartwait-mvp/tasks.md
-index 12696c6..1959bd2 100644
---- a/.kiro/specs/smartwait-mvp/tasks.md
-+++ b/.kiro/specs/smartwait-mvp/tasks.md
-@@ -18,7 +18,12 @@ This implementation plan breaks down the SmartWait MVP into 10 days of focused d
- **Description:** Set up the complete project structure with database schema and basic API foundation.
- 
- **Acceptance Criteria:**
--- [ ] Create monorepo structure with api/, web/, and mobile/ directories
-+- [x] Create monorepo structure with api/, web/, and mobile/ directories
-+
-+
-+
-+
-+
- - [ ] Set up PostgreSQL database with complete schema (patients, queue_positions, staff_sessions, sms_notifications)
- - [ ] Create Docker Compose configuration for local development
- - [ ] Set up TypeScript configuration for all projects
-diff --git a/README.md b/README.md
-index e69de29..de8650a 100644
---- a/README.md
-+++ b/README.md
-@@ -0,0 +1,229 @@
-+# SmartWait - Healthcare Queue Management System
-+
-+A comprehensive virtual queuing ecosystem that transforms healthcare waiting experiences through intelligent queue management, real-time communication, and data-driven optimization.
-+
-+## 🏗️ Project Structure
-+
-+This is a monorepo containing all SmartWait applications and services:
-+
-+```
-+smartwait/
-+├── apps/
-+│   ├── api/          # Node.js/Express API server
-+│   ├── web/          # Next.js web portal and staff dashboard
-+│   └── mobile/       # React Native mobile app (Expo)
-+├── packages/
-+│   └── shared/       # Shared types and utilities
-+├── infrastructure/
-+│   └── docker/       # Docker configurations
-+└── docs/            # Documentation
-+```
-+
-+## 🚀 Quick Start
-+
-+### Prerequisites
-+
-+- Node.js 18+ 
-+- npm 8+
-+- Docker and Docker Compose
-+- Expo CLI (for mobile development)
-+
-+### Installation
-+
-+1. **Clone the repository**
-+   ```bash
-+   git clone <repository-url>
-+   cd smartwait
-+   ```
-+
-+2. **Install dependencies**
-+   ```bash
-+   npm run install:all
-+   ```
-+
-+3. **Set up environment variables**
-+   ```bash
-+   # Copy environment files
-+   cp apps/api/.env.example apps/api/.env
-+   cp apps/web/.env.example apps/web/.env
-+   
-+   # Edit the .env files with your configuration
-+   ```
-+
-+4. **Start the development environment**
-+   ```bash
-+   # Start all services with Docker
-+   docker-compose up -d
-+   
-+   # Or start individual services
-+   npm run dev
-+   ```
-+
-+### Development URLs
-+
-+- **API Server**: http://localhost:3001
-+- **Web Portal**: http://localhost:3000
-+- **Mobile App**: Use Expo Go app to scan QR code
-+
-+## 📱 Applications
-+
-+### API Server (`apps/api`)
-+- **Technology**: Node.js, Express, TypeScript
-+- **Database**: PostgreSQL with Redis caching
-+- **Features**: Queue management, SMS notifications, real-time updates
-+
-+### Web Portal (`apps/web`)
-+- **Technology**: Next.js 13, React, TypeScript, Tailwind CSS
-+- **Features**: Patient check-in portal, staff dashboard
-+
-+### Mobile App (`apps/mobile`)
-+- **Technology**: React Native, Expo, TypeScript
-+- **Features**: Patient check-in, queue status tracking, push notifications
-+
-+## 🛠️ Development
-+
-+### Available Scripts
-+
-+```bash
-+# Development
-+npm run dev              # Start all services
-+npm run dev:api          # Start API server only
-+npm run dev:web          # Start web portal only
-+npm run dev:mobile       # Start mobile app only
-+
-+# Building
-+npm run build            # Build all applications
-+npm run build:api        # Build API server
-+npm run build:web        # Build web portal
-+
-+# Testing
-+npm run test             # Run all tests
-+npm run test:api         # Test API server
-+npm run test:web         # Test web portal
-+npm run test:mobile      # Test mobile app
-+
-+# Linting
-+npm run lint             # Lint all projects
-+```
-+
-+### Database Setup
-+
-+The PostgreSQL database is automatically initialized with Docker Compose. The schema includes:
-+
-+- **patients**: Patient information
-+- **queue_positions**: Queue management
-+- **staff_sessions**: Staff authentication
-+- **sms_notifications**: SMS delivery tracking
-+
-+### Environment Configuration
-+
-+#### API Server (`.env`)
-+```env
-+PORT=3001
-+DATABASE_URL=postgresql://user:password@localhost:5432/smartwait
-+REDIS_URL=redis://localhost:6379
-+JWT_SECRET=your-jwt-secret
-+TWILIO_ACCOUNT_SID=your-twilio-sid
-+TWILIO_AUTH_TOKEN=your-twilio-token
-+TWILIO_PHONE_NUMBER=+1234567890
-+```
-+
-+#### Web Portal (`.env`)
-+```env
-+NEXT_PUBLIC_API_URL=http://localhost:3001
-+NEXT_PUBLIC_WS_URL=ws://localhost:3001
-+```
-+
-+## 🏥 Features
-+
-+### Core Functionality
-+- ✅ **Multi-channel Check-in**: Mobile app, web portal, QR codes
-+- ✅ **Real-time Queue Management**: Live position updates
-+- ✅ **SMS Notifications**: Automated patient notifications
-+- ✅ **Staff Dashboard**: Queue management interface
-+- ✅ **Remote Waiting**: Location-based waiting capabilities
-+
-+### Technical Features
-+- 🔒 **HIPAA Compliant**: Secure patient data handling
-+- 📱 **Cross-platform**: iOS, Android, and web support
-+- ⚡ **Real-time Updates**: WebSocket-based live updates
-+- 🔄 **API Integration**: Healthcare system compatibility
-+- 📊 **Analytics**: Queue performance insights
-+
-+## 🧪 Testing
-+
-+### Unit Tests
-+```bash
-+npm run test:api         # API unit tests
-+npm run test:web         # Web component tests
-+npm run test:mobile      # Mobile component tests
-+```
-+
-+### Integration Tests
-+```bash
-+# API integration tests
-+cd apps/api && npm run test:integration
-+
-+# End-to-end tests
-+cd apps/web && npm run test:e2e
-+```
-+
-+## 📦 Deployment
-+
-+### Docker Production Build
-+```bash
-+# Build production images
-+docker-compose -f docker-compose.prod.yml build
-+
-+# Deploy to production
-+docker-compose -f docker-compose.prod.yml up -d
-+```
-+
-+### Individual Service Deployment
-+```bash
-+# API Server
-+cd apps/api
-+npm run build
-+npm start
-+
-+# Web Portal
-+cd apps/web
-+npm run build
-+npm start
-+```
-+
-+## 🤝 Contributing
-+
-+1. Fork the repository
-+2. Create a feature branch (`git checkout -b feature/amazing-feature`)
-+3. Commit your changes (`git commit -m 'Add amazing feature'`)
-+4. Push to the branch (`git push origin feature/amazing-feature`)
-+5. Open a Pull Request
-+
-+### Development Guidelines
-+
-+- Follow TypeScript strict mode
-+- Use conventional commit messages
-+- Write tests for new features
-+- Update documentation as needed
-+- Follow the established code style
-+
-+## 📄 License
-+
-+This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
-+
-+## 🆘 Support
-+
-+For support and questions:
-+- Create an issue in this repository
-+- Check the [documentation](./docs/)
-+- Review the [API documentation](http://localhost:3001/docs) when running locally
-+
-+## 🗺️ Roadmap
-+
-+- [ ] Advanced analytics dashboard
-+- [ ] Multi-language support
-+- [ ] Voice notifications
-+- [ ] Digital signage integration
-+- [ ] Advanced EHR integrations
-+- [ ] Machine learning wait time predictions
-\ No newline at end of file
-diff --git a/docker-compose.yml b/docker-compose.yml
-index e69de29..a61faad 100644
---- a/docker-compose.yml
-+++ b/docker-compose.yml
-@@ -0,0 +1,84 @@
-+version: '3.8'
-+
-+services:
-+  # PostgreSQL Database
-+  postgres:
-+    image: postgres:14-alpine
-+    container_name: smartwait-postgres
-+    environment:
-+      POSTGRES_DB: smartwait
-+      POSTGRES_USER: smartwait_user
-+      POSTGRES_PASSWORD: smartwait_password
-+    ports:
-+      - "5432:5432"
-+    volumes:
-+      - postgres_data:/var/lib/postgresql/data
-+      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
-+    networks:
-+      - smartwait-network
-+
-+  # Redis Cache
-+  redis:
-+    image: redis:6-alpine
-+    container_name: smartwait-redis
-+    ports:
-+      - "6379:6379"
-+    volumes:
-+      - redis_data:/data
-+    networks:
-+      - smartwait-network
-+
-+  # API Service
-+  api:
-+    build:
-+      context: ./apps/api
-+      dockerfile: Dockerfile
-+    container_name: smartwait-api
-+    ports:
-+      - "3001:3001"
-+    environment:
-+      - NODE_ENV=development
-+      - PORT=3001
-+      - DATABASE_URL=postgresql://smartwait_user:smartwait_password@postgres:5432/smartwait
-+      - REDIS_URL=redis://redis:6379
-+      - JWT_SECRET=development-jwt-secret-change-in-production
-+      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
-+      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
-+      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
-+    depends_on:
-+      - postgres
-+      - redis
-+    volumes:
-+      - ./apps/api:/app
-+      - /app/node_modules
-+    networks:
-+      - smartwait-network
-+
-+  # Web Application
-+  web:
-+    build:
-+      context: ./apps/web
-+      dockerfile: Dockerfile
-+    container_name: smartwait-web
-+    ports:
-+      - "3000:3000"
-+    environment:
-+      - NODE_ENV=development
-+      - NEXT_PUBLIC_API_URL=http://localhost:3001
-+      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
-+    depends_on:
-+      - api
-+    volumes:
-+      - ./apps/web:/app
-+      - /app/node_modules
-+      - /app/.next
-+    networks:
-+      - smartwait-network
-+
-+volumes:
-+  postgres_data:
-+  redis_data:
-+
-+networks:
-+  smartwait-network:
-+    driver: bridge
-\ No newline at end of file
-diff --git a/package.json b/package.json
-index e69de29..35f49bc 100644
---- a/package.json
-+++ b/package.json
-@@ -0,0 +1,56 @@
-+{
-+  "name": "smartwait-monorepo",
-+  "version": "1.0.0",
-+  "description": "SmartWait Healthcare Queue Management System",
-+  "private": true,
-+  "workspaces": [
-+    "apps/*",
-+    "packages/*"
-+  ],
-+  "scripts": {
-+    "dev": "concurrently \"npm run dev:api\" \"npm run dev:web\" \"npm run dev:mobile\"",
-+    "dev:api": "cd apps/api && npm run dev",
-+    "dev:web": "cd apps/web && npm run dev",
-+    "dev:mobile": "cd apps/mobile && npm start",
-+    "build": "npm run build:api && npm run build:web",
-+    "build:api": "cd apps/api && npm run build",
-+    "build:web": "cd apps/web && npm run build",
-+    "test": "npm run test:api && npm run test:web && npm run test:mobile",
-+    "test:api": "cd apps/api && npm test",
-+    "test:web": "cd apps/web && npm test",
-+    "test:mobile": "cd apps/mobile && npm test",
-+    "lint": "npm run lint:api && npm run lint:web && npm run lint:mobile",
-+    "lint:api": "cd apps/api && npm run lint",
-+    "lint:web": "cd apps/web && npm run lint",
-+    "lint:mobile": "cd apps/mobile && npm run lint",
-+    "install:all": "npm install && npm run install:api && npm run install:web && npm run install:mobile",
-+    "install:api": "cd apps/api && npm install",
-+    "install:web": "cd apps/web && npm install",
-+    "install:mobile": "cd apps/mobile && npm install",
-+    "clean": "npm run clean:api && npm run clean:web && npm run clean:mobile",
-+    "clean:api": "cd apps/api && rm -rf node_modules dist",
-+    "clean:web": "cd apps/web && rm -rf node_modules .next",
-+    "clean:mobile": "cd apps/mobile && rm -rf node_modules"
-+  },
-+  "devDependencies": {
-+    "concurrently": "^8.2.0",
-+    "lerna": "^7.1.4"
-+  },
-+  "engines": {
-+    "node": ">=18.0.0",
-+    "npm": ">=8.0.0"
-+  },
-+  "repository": {
-+    "type": "git",
-+    "url": "https://github.com/your-org/smartwait.git"
-+  },
-+  "keywords": [
-+    "healthcare",
-+    "queue-management",
-+    "virtual-waiting",
-+    "patient-experience",
-+    "monorepo"
-+  ],
-+  "author": "SmartWait Team",
-+  "license": "MIT"
-+}
-\ No newline at end of file
